src/
├── assets/            # Static assets (e.g., images, icons)
├── components/        # Reusable UI components
│   ├── common/        # Generic components (e.g., buttons, loaders)
│   ├── ArticleCard/   # Component for displaying individual articles
│   ├── Navbar/        # Navigation bar component
│   ├── SearchBar/     # Search bar component
│   └── Footer/        # Footer component
├── pages/             # Page components
│   ├── Home/          # Homepage component
│   ├── ArticleDetails/ # Article details page component
│   └── Preferences/   # User preferences page (optional)
├── services/          # API service functions
│   └── newsAPI.js     # File for handling API requests
├── utils/             # Utility functions (e.g., helpers, constants)
├── contexts/          # React Contexts (if needed for state management)
├── hooks/             # Custom React hooks (if needed)
├── styles/            # Custom styles (if not using Tailwind exclusively)
├── App.js             # Main app component (routes and layout)
└── index.js           # Entry point


Notes: 
React Router DDOM-> is a library that help you handle routing in react app. It allows you to create multiple pages(Home,Categories,About) and navigate between them without reloading the page.
installation:
->npm i react-router-dom


Router	Wraps the entire app to enable routing.
Routes	Groups multiple <Route> components together.
Route	Defines a specific route and what component to show.

 <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
    </Router>

    Term	Think of it as...	Meaning
Router	🏠 Hallway	Connects all pages (rooms) together.
Routes	🗺️ Map	Tells which door leads to which page.
Route	🚪 A door	Opens a specific page when the URL matches.

What is Axios
Axios is a JavaScript library used to make HTTP requests (like fetching data from an API) easily. 
Send GET requests to fetch data.
✅ Send POST requests to send data.
✅ Handle errors and responses easily.
✅ Work with REST APIs (like getting weather data, user details, etc.).

npm install axios

4️⃣ Why use Axios instead of fetch()?
Feature	fetch()	Axios
Auto JSON parsing	❌ No (need response.json())	✅ Yes (response is already parsed)
Handles Errors	❌ Manually check response.ok	✅ Catches errors automatically
Supports Timeout	❌ No	✅ Yes
Request Cancellation	❌ No	✅ Yes
Simpler Syntax	❌ More steps needed	✅ Cleaner and shorter

Difference between export const vs export default 

A) export const

1)features ->Exports multiple items?
✅ Yes, you can export many constants/functions.	
2)Import style
->export const fetchTopHeadines = async () => { ... }
3)Renaming in import?
->No, must use exact name.
4)✅ When importing, you must use curly braces {}:
import { fetchTopHeadines } from './newsAPI';





B) export default 

1)features ->Exports multiple items?
->❌ No, only one thing per file.
2)Import style
const fetchTopHeadines = async () => { ... };
export default fetchTopHeadines;
3)Renaming in import?
 ->Yes, you can rename it while importing.
4)✅ When importing, no {} is needed:
->import fetchNews from './newsAPI';

//
Sure! Here's a simplified summary for your notes:

### **App.jsx:**
- Manages `searchQuery` state (user's search input).
- Passes `searchQuery` and `setSearchQuery` to `Nav` (for the search bar) and `Home` (to filter articles).

### **Home.jsx:**
- Receives `searchQuery` as a prop from `App`.
- Filters articles based on `searchQuery` (matches article titles with the search input).
- Displays only the articles that match the search query.

### **How It Works Together:**
1. User types in the search bar → `setSearchQuery` updates the `searchQuery` state in `App`.
2. `searchQuery` is passed to `Nav` (for display) and `Home` (for filtering articles).
3. `Home` filters and displays only matching articles.

This ensures that when the user searches, the articles are updated based on their input.

/////////////////////////////Dark Mode////////////////////////////////////
while using Tailwind you need to add 

darkMode: "class",
{
  export default {
  darkMode: "class",
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

}

# News Explorer Project - Detailed Notes

## Project Overview
News Explorer is a modern web application that aggregates news from various reliable sources, allowing users to stay informed about current events in a streamlined and personalized way. The app features category filtering, search functionality, article saving, and more.

## Tech Stack
- **React**: JavaScript library for building user interfaces
- **Vite**: Fast build tool and development server
- **Tailwind CSS**: Utility-first CSS framework for styling
- **React Router**: Handles navigation between different pages
- **Axios**: Makes HTTP requests to fetch news data from APIs
- **LocalForage**: Client-side storage library for caching API responses

## API Information
The app uses multiple news APIs:
- **The Guardian API**: Primary source for most news categories (your key: 479a5476-6352-4150-a365-812a29830560)
- **MediaStack API**: Used for health news (your key is in the .env file)
- **NewsAPI**: Used for development testing only (has CORS limitations)

## Project Structure
- `/src`: Contains all source code
  - `/components`: React components organized by feature
  - `/services`: API and utility services
  - `/assets`: Static assets like images
- `/public`: Static files that are copied directly to the build folder

## Key Features

### 1. Multi-Source News Aggregation
- The app fetches news from different APIs and presents them in a unified format
- Each news source has its own data structure, which is normalized in our API service

### 2. Category-Based Filtering
- Users can browse news by categories: Technology, Sports, Business, Science, Entertainment, and Health
- Each category fetches from specific sections of The Guardian API, with Health using MediaStack

### 3. Date-Based Filtering
- Filter articles by: Today, This Week, This Month, This Year
- The filtering logic uses JavaScript Date objects to compare article publication dates

### 4. Search Functionality
- Users can search across all news articles
- Search is implemented by filtering fetched articles by title and description

### 5. Save for Later
- Articles can be bookmarked for later reading
- Saved articles are stored in localStorage and persist across browser sessions
- Users can view all saved articles on a dedicated page

### 6. Infinite Scroll
- New articles load automatically as the user scrolls down
- Uses IntersectionObserver API to detect when the user reaches the bottom of the page
- Implements pagination to fetch articles in batches (usually 10 at a time)

### 7. API Caching System
- Reduces API calls by storing responses in the browser
- Different expiration times for different types of content:
  - Headlines: 15 minutes
  - Category News: 30 minutes
  - Health News: 1 hour
- Cache can be manually cleared through the settings panel

### 8. Responsive Design & Dark Mode
- Fully responsive layout works on mobile, tablet, and desktop
- Dark mode toggle for comfortable reading in low-light environments

## Environment Variables
- All API keys are stored in environment variables for security
- `.env` file contains the actual keys (not committed to git)
- `.env.example` shows the required variables without actual keys

## How to Run the Project
1. Clone the repository
2. Install dependencies: `npm install`
3. Create a `.env` file with your API keys (see `.env.example`)
4. Start development server: `npm run dev`

## Deployment
- Build the project: `npm run build`
- The built files will be in the `dist` folder
- These can be deployed to hosting services like Vercel, Netlify, etc.
- Remember to set up environment variables on your hosting platform

## Common Issues & Solutions

### API Rate Limits
- The Guardian API: 12 requests/second, 5,000 requests/day
- MediaStack: 500 requests/month (free tier)
- Solution: The app implements caching to reduce API calls

### CORS Issues with NewsAPI
- The free tier of NewsAPI only works on localhost
- Solution: The app falls back to Guardian API when not on localhost

### Image Loading
- If images fail to load, the app provides fallback default images
- Error handling is implemented for all API calls

## Future Enhancement Ideas
1. User Authentication: Allow users to create accounts to sync saved articles
2. Personalized Feed: Let users select preferred categories
3. Push Notifications: Alert users of breaking news
4. Comments & Social Features: Allow users to discuss articles
5. Advanced Search Filters: Add more filtering options like sources, authors
6. Multi-language Support: Add support for news in different languages

## Working with the Code (For Beginners)

### Adding a New Feature
1. First, understand how existing features work by exploring the codebase
2. Create new component(s) in the appropriate directory
3. Update the main App component if needed
4. Test thoroughly on different devices and browsers

### Modifying an Existing Feature
1. Locate the component(s) responsible for the feature
2. Make changes carefully, ensuring you understand the existing code
3. Test to make sure your changes don't break other functionality

### Working with APIs
1. All API calls are in the `src/services/newsAPI.js` file
2. Each API has its own format, which is normalized in the formatter functions
3. The caching layer intercepts API calls to reduce requests

## Tips for Success
- Use browser developer tools to debug issues
- Check the console for errors
- Test regularly on different devices
- Keep API keys secure
- Monitor API usage to avoid exceeding limits

## Learning Resources
- React: https://react.dev/
- Tailwind CSS: https://tailwindcss.com/docs
- Vite: https://vitejs.dev/guide/
- The Guardian API: https://open-platform.theguardian.com/documentation/
- MediaStack: https://mediastack.com/documentation

---

This project demonstrates modern web development practices including responsive design, API integration, state management, and performance optimization. It's an excellent portfolio piece that showcases React skills and the ability to work with external APIs. 



